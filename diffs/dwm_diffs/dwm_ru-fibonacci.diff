diff --git a/config.def.h b/config.def.h
index a2ac963..1c0b587 100644
--- a/config.def.h
+++ b/config.def.h
@@ -35,7 +35,6 @@ static const Rule rules[] = {
 static const float mfact     = 0.55; /* factor of master area size [0.05..0.95] */
 static const int nmaster     = 1;    /* number of clients in master area */
 static const int resizehints = 1;    /* 1 means respect size hints in tiled resizals */
-static const int lockfullscreen = 1; /* 1 will force focus on the fullscreen window */
 
 static const Layout layouts[] = {
 	/* symbol     arrange function */
diff --git a/dwm.c b/dwm.c
index a96f33c..664c527 100644
--- a/dwm.c
+++ b/dwm.c
@@ -702,9 +702,6 @@ drawbar(Monitor *m)
 	unsigned int i, occ = 0, urg = 0;
 	Client *c;
 
-	if (!m->showbar)
-		return;
-
 	/* draw status first so it can be overdrawn by tags later */
 	if (m == selmon) { /* status is only drawn on selected monitor */
 		drw_setscheme(drw, scheme[SchemeNorm]);
@@ -838,7 +835,7 @@ focusstack(const Arg *arg)
 {
 	Client *c = NULL, *i;
 
-	if (!selmon->sel || (selmon->sel->isfullscreen && lockfullscreen))
+	if (!selmon->sel)
 		return;
 	if (arg->i > 0) {
 		for (c = selmon->sel->next; c && !ISVISIBLE(c); c = c->next);
diff --git a/fibonacci.c b/fibonacci.c
new file mode 100644
index 0000000..42becff
--- /dev/null
+++ b/fibonacci.c
@@ -0,0 +1,74 @@
+static void
+fibonacci(Monitor *m, int s)
+{
+	unsigned int i, n;
+	int nx, ny, nw, nh;
+	Client *c;
+
+	for (n = 0, c = nexttiled(m->clients); c; c = nexttiled(c->next), n++);
+	if (n == 0)
+		return;
+	if (n == 1) {
+		c = nexttiled(m->clients);
+        resize(c, m->wx + m->gappx, m->wy + m->gappx, m->ww - (2 * c->bw) - m->gappx * 2, m->wh - (2 * c->bw) - m->gappx * 2, 0);
+		return;
+	}
+
+	nx = m->wx + m->gappx;
+	ny = m->gappx;
+	nw = m->ww - 2*m->gappx;
+	nh = m->wh - 2*m->gappx;
+
+	for (i = 0, c = nexttiled(m->clients); c; c = nexttiled(c->next)) {
+		if ((i % 2 && nh / 2 > 2*c->bw)
+		   || (!(i % 2) && nw / 2 > 2*c->bw)) {
+			if (i < n - 1) {
+				if (i % 2)
+					nh = (nh - m->gappx) / 2;
+				else
+					nw = (nw - m->gappx) / 2;
+
+				if ((i % 4) == 2 && !s)
+					nx += nw + m->gappx;
+				else if ((i % 4) == 3 && !s)
+					ny += nh + m->gappx;
+			}
+			if ((i % 4) == 0) {
+				if (s)
+					ny += nh + m->gappx;
+				else
+					ny -= nh + m->gappx;
+			}
+			else if ((i % 4) == 1)
+				nx += nw + m->gappx;
+			else if ((i % 4) == 2)
+				ny += nh + m->gappx;
+			else if ((i % 4) == 3) {
+				if (s)
+					nx += nw + m->gappx;
+				else
+					nx -= nw + m->gappx;
+			}
+			if (i == 0)	{
+				if (n != 1)
+					nw = (m->ww - 2*m->gappx - m->gappx) * m->mfact;
+				ny = m->wy + m->gappx;
+			}
+			else if (i == 1)
+				nw = m->ww - nw - m->gappx - 2*m->gappx;
+			i++;
+		}
+
+		resize(c, nx, ny, nw - (2*c->bw), nh - (2*c->bw), False);
+	}
+}
+
+void
+dwindle(Monitor *mon) {
+	fibonacci(mon, 1);
+}
+
+void
+spiral(Monitor *mon) {
+	fibonacci(mon, 0);
+}
